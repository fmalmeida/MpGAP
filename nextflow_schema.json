{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
    "title": ". pipeline parameters",
    "description": "",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "properties": {
                "outdir": {
                    "type": "string",
                    "description": "The output directory where the results will be saved.",
                    "default": "./results",
                    "fa_icon": "fas fa-folder-open",
                    "help_text": "All the outputs will be stored under this directory. Sub-folders for each dataset will be written in this folder using reads basenames. Short reads basenames for short reads only assemblies and long reads basenames for hybrid and long reads only assemblies."
                },
                "prefix": {
                    "type": "string",
                    "description": "Gives a custom prefix for sample results.",
                    "help_text": "If is not given, the pipeline will use the reads names to create a custom prefix. Must only be used if running the pipeline for a single sample."
                },
                "longreads": {
                    "type": "string",
                    "description": "Path to input long reads (ONT or Pacbio) in fastq",
                    "help_text": "This sets path to the input longreads. It is required for longreads-only or hybrid assemblies.",
                    "fa_icon": "fas fa-file"
                },
                "lr_type": {
                    "type": "string",
                    "enum": [
                        "pacbio",
                        "nanopore"
                    ],
                    "default": "nanopore",
                    "description": "Tells whether input longreads are: pacbio or nanopore.",
                    "help_text": "Your long reads are from pacbio or nanopore sequencing platforms?",
                    "fa_icon": "fas fa-question"
                },
                "wtdbg2_technology": {
                    "type": "string",
                    "description": "Set  correct long reads technology specification for wtdbg2",
                    "default": "ont",
                    "help_text": "When assembling pacbio long reads with wtdbg2, it is necessary to tell the pipeline whether reads are \"rs\" for PacBio RSII, \"sq\" for PacBio Sequel, \"ccs\" for PacBio CCS reads.\n\nThis parameter defaults to ont, such it is required to change when using pacbio reads.",
                    "fa_icon": "fas fa-question"
                },
                "corrected_lreads": {
                    "type": "boolean",
                    "description": "Tells the pipeline to interpret the long reads as \"corrected\" long reads.",
                    "help_text": "This will activate (if available) the options for corrected reads in the assemblers: -corrected (in canu), --pacbio-corr|--nano-corr (in flye), etc. Be cautious when using this parameter. If your reads are not corrected, and you use this parameter, you will probably do not generate any contig.",
                    "fa_icon": "fas fa-question"
                },
                "shortreads_paired": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to input paired end short reads in fastq",
                    "help_text": "This sets path to the input paired end short reads. It is required for shortreads-only or hybrid assemblies.\nUsers must use the following notation: \"path/to/dir/pattern_{1,2}.fastq\". It can be gzipped or not.\nThe \\*{1,2}\\* regex is required so that nextflow can properly load the exact read pairs. Read more [in their manual](https://www.nextflow.io/docs/latest/channel.html#fromfilepairs)."
                },
                "shortreads_single": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to input unpaired short reads in fastq",
                    "help_text": "This sets path to the input unpaired short reads. It is required for shortreads-only or hybrid assemblies."
                }
            },
            "required": [
                "outdir"
            ]
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "properties": {
                "threads": {
                    "type": "integer",
                    "description": "Number of threads to use for each process",
                    "default": 4,
                    "fa_icon": "fas fa-cogs"
                },
                "parallel_jobs": {
                    "type": "integer",
                    "default": 1,
                    "description": "Number of jobs to run in parallel. Each job can consume up to N threads (--threads)",
                    "fa_icon": "fas fa-cogs"
                },
                "cpus": {
                    "type": "integer",
                    "description": "Number of cores to run nanopolish in parallel",
                    "default": 2,
                    "fa_icon": "fas fa-microchip"
                }
            }
        },
        "hybrid_assembly_strategy_parameters": {
            "title": "Hybrid assembly strategy parameters",
            "type": "object",
            "fa_icon": "fas fa-ellipsis-v",
            "description": "Select assembly strategy",
            "properties": {
                "strategy_2": {
                    "type": "boolean",
                    "description": "For hybrid assemblies, use strategy 2",
                    "help_text": "This paremeter tells the pipeline to first create a longreads-only assembly and then polish it with short reads, instead of executing the hybrid assembly modes implemented by Unicycler, Haslr and SPAdes.",
                    "fa_icon": "fab fa-confluence"
                },
                "pilon_memory_limit": {
                    "type": "number",
                    "description": "Max amount of memory allocated by Pilon (in gigabase)",
                    "default": 50,
                    "help_text": "Whenever polishing long reads only assemblies with unpaired short reads (single end), the pipeline will directly execute one round of pilon polishing instead of using Unicycler's polish pipeline. Therefore we need to allocate the amount of memory allocated by Pilon. Default 50G. This step is crucial because with not enough memory will crash and not correct your assembly. When that happens you will not have the pilon output nor the QUAST assessment.",
                    "fa_icon": "fas fa-database"
                }
            }
        },
        "turn_assemblers_on_off": {
            "title": "Turn assemblers on/off",
            "type": "object",
            "description": "Select which assemblers to skip or not",
            "default": "",
            "fa_icon": "fas fa-tasks",
            "properties": {
                "skip_spades": {
                    "type": "boolean",
                    "description": "Skip SPAdes assembler",
                    "help_text": "SPAdes is a short reads only and hybrid assembler."
                },
                "skip_shovill": {
                    "type": "boolean",
                    "description": "Skip Shovill assembler",
                    "help_text": "Shovill is a paired short reads only assembler."
                },
                "skip_unicycler": {
                    "type": "boolean",
                    "description": "Skip Unicycler assembler",
                    "help_text": "Unicycler is a short reads only, long reads only and hybrid assembler."
                },
                "skip_haslr": {
                    "type": "boolean",
                    "description": "Skip Haslr assembler",
                    "help_text": "Haslr is a hybrid assembler."
                },
                "skip_canu": {
                    "type": "boolean",
                    "description": "Skip Canu assembler",
                    "help_text": "Canu is a long reads only assembler. Can be use for hybrid assemblies in strategy 2."
                },
                "skip_flye": {
                    "type": "boolean",
                    "description": "Skip Flye assembler",
                    "help_text": "Flye is a long reads only assembler. Can be use for hybrid assemblies in strategy 2."
                },
                "skip_raven": {
                    "type": "boolean",
                    "description": "Skip Raven assembler",
                    "help_text": "Raven is a long reads only assembler. Can be use for hybrid assemblies in strategy 2."
                },
                "skip_wtdbg2": {
                    "type": "boolean",
                    "description": "Skip wtdbg2 assembler",
                    "help_text": "wtdbg2 is a long reads only assembler. Can be use for hybrid assemblies in strategy 2."
                },
                "skip_shasta": {
                    "type": "boolean",
                    "description": "Skip Shasta assembler",
                    "help_text": "Shasta is a long reads only assembler. Can be use for hybrid assemblies in strategy 2."
                }
            }
        },
        "expected_genome_size": {
            "title": "Expected genome size",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "genomeSize": {
                    "type": "string",
                    "description": "Set the expected genome size (E.g. 5.6m; 1.2g)",
                    "help_text": "It sets the expected genome size of the assembly. It is required by Canu and Haslr assemblers. It is optional for Flye, but highly recommended. E.g. 5.6m; 1.2g."
                }
            }
        },
        "software_additional_parameters": {
            "title": "Software' additional parameters",
            "type": "object",
            "description": "Pass additional parameters to the software",
            "default": "",
            "properties": {
                "quast_additional_parameters": {
                    "type": "string",
                    "description": "QUAST additional parameters",
                    "help_text": "Give additional parameters to Quast while assessing assembly metrics. \nMust be in quotes and separated by spaces.\nMust be given as shown in Quast manual. E.g. \" --large --eukaryote \"."
                },
                "shovill_additional_parameters": {
                    "type": "string",
                    "description": "Shovill additional parameters",
                    "help_text": "Passes additional parameters for Shovill assembler. E.g. '--depth 15 --assembler skesa'. Must be given as shown in Shovill\u2019 manual."
                },
                "spades_additional_parameters": {
                    "type": "string",
                    "description": "SPAdes additional parameters",
                    "help_text": "Passes additional parameters for SPAdes assembler. E.g. '\u2013meta \u2013plasmids'. Must be given as shown in Spades\u2019 manual."
                },
                "unicycler_additional_parameters": {
                    "type": "string",
                    "description": "Unicycler additional parameters",
                    "help_text": "Passes additional parameters for Unicycler assembler. E.g. '\u2013mode conservative \u2013no_correct'. Must be given as shown in Unicycler\u2019s manual."
                },
                "haslr_additional_parameters": {
                    "type": "string",
                    "description": "Haslr additional parameters",
                    "help_text": "Passes additional parameters for Haslr assembler. E.g. '--cov-lr 30'. Must be given as shown in Haslr\u2019 manual."
                },
                "canu_additional_parameters": {
                    "type": "string",
                    "description": "Canu additional parameters",
                    "help_text": "Passes additional parameters for Canu assembler. E.g. 'correctedErrorRate=0.075 corOutCoverage=200'. Must be given as shown in Canu\u2019s manual."
                },
                "flye_additional_parameters": {
                    "type": "string",
                    "description": "Flye additional parameters",
                    "help_text": "Passes additional parameters for Flye assembler. E.g. '\u2013meta \u2013iterations 4'. Must be given as shown in Flye\u2019s manual."
                },
                "raven_additional_parameters": {
                    "type": "string",
                    "description": "Raven additional parameters",
                    "help_text": "Passes additional parameters for Raven assembler. E.g. '--polishing-rounds 4'. Must be given as shown in Raven\u2019 manual."
                },
                "wtdbg2_additional_parameters": {
                    "type": "string",
                    "description": "wtdbg2 additional parameters",
                    "help_text": "Must be given as shown in wtdbg2 manual. E.g. \" --tidy-reads 5000 \", inside quotes and separated by spaces."
                },
                "shasta_additional_parameters": {
                    "type": "string",
                    "description": "Shasta additional parameters",
                    "help_text": "Must be given as shown in shasta manual. E.g. \" --Reads.minReadLength 5000 \", inside quotes and separated by spaces"
                }
            },
            "fa_icon": "fas fa-list-ul"
        },
        "long_reads_assembly_polishing_parameters": {
            "title": "Long reads assembly polishing parameters",
            "type": "object",
            "description": "Select which long reads assembly polishers to use. They can be also used with hybrid assemblies in strategy 2, see the docs.",
            "default": "",
            "properties": {
                "medaka_sequencing_model": {
                    "type": "string",
                    "help_text": "Useful for longreads-only or hybrid assemblies using strategy 2.\nUsed to polish a longreads-only assembly with Medaka. It selects a Medaka ONT sequencing model for polishing. Please read [medaka manual](https://nanoporetech.github.io/medaka/) for more instructions.\n\nModels Available: r103_min_high_g345, r103_min_high_g360, r103_prom_high_g360, r103_prom_snp_g3210, r103_prom_variant_g3210, r10_min_high_g303, r10_min_high_g340, r941_min_fast_g303, r941_min_high_g303, r941_min_high_g330, r941_min_high_g340_rle, r941_min_high_g344, r941_min_high_g351, r941_min_high_g360, r941_prom_fast_g303, r941_prom_high_g303, r941_prom_high_g330, r941_prom_high_g344, r941_prom_high_g360, r941_prom_high_g4011, r941_prom_snp_g303, r941_prom_snp_g322, r941_prom_snp_g360, r941_prom_variant_g303, r941_prom_variant_g322, r941_prom_variant_g360\nDefault consensus:  r941_min_high_g360",
                    "description": "Polish with Medaka? Which model?",
                    "default": "r941_min_high_g360"
                },
                "nanopolish_fast5Path": {
                    "type": "string",
                    "description": "Polish with Nanopolish? Set path to dir with fast5 data.",
                    "help_text": "Useful for longreads-only or hybrid assemblies using strategy 2.\nUsed to polish a longreads-only assembly with Nanopolish. It sets path to the directory containing all the FAST5 files containing the raw data."
                },
                "nanopolish_max_haplotypes": {
                    "type": "number",
                    "description": "Max. number of haplotypes to be considered by Nanopolish",
                    "help_text": "Useful when polishing the genome with Nanopolish (--nanopolish_fast5Path).\nIt sets the max number of haplotypes to be considered by Nanopolish. Sometimes the pipeline may crash because to much variation was found exceeding the limit.",
                    "default": 1000
                },
                "pacbio_bams": {
                    "type": "string",
                    "description": "Loads all the subreads *.bam pacbio raw files for polishing with gcpp",
                    "help_text": "This parameter loads all the subreads *.bam pacbio raw files for polishing with gcpp.\nIn order to nextflow properly use it, one needs to store all the data, from all the cells in one single directory and set the filepath as \"some/data/*bam\"."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/hybrid_assembly_strategy_parameters"
        },
        {
            "$ref": "#/definitions/turn_assemblers_on_off"
        },
        {
            "$ref": "#/definitions/expected_genome_size"
        },
        {
            "$ref": "#/definitions/software_additional_parameters"
        },
        {
            "$ref": "#/definitions/long_reads_assembly_polishing_parameters"
        }
    ]
}
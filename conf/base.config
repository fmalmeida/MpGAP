process {

    // The defaults for all processes (without labels)
    cpus   = 2
    memory = 4.GB
    time   = { params.max_time }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // labels
    withLabel:process_ultralow {
        cpus   = { check_max( 1 * task.attempt, 'cpus'      ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2 * task.attempt, 'cpus'      ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time'    ) }

        errorStrategy = { task.exitStatus in [21,143,137,104,134,139,247] ? 'retry' : 'finish' }
        maxRetries    = 1
        maxErrors     = '-1'
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // Assemblies will first try to adjust themselves to a parallel execution
    // If it is not possible, then it waits to use all the resources allowed
    withLabel:process_assembly {
      cpus   = {  if (task.attempt == 1) { check_max( params.start_asm_cpus, 'cpus'   ) } else { params.max_cpus   } }
      memory = {  if (task.attempt == 1) { check_max( params.start_asm_mem , 'memory' ) } else { params.max_memory } }
      
      // retry at least once to try it with full resources
      errorStrategy = { task.exitStatus in [1,21,143,137,104,134,139,247] ? 'retry' : 'finish' }
      maxRetries    = 1
      maxErrors     = '-1'
    }

    // Quast sometimes can take too long
    def quast_mem  = check_quast( params.start_asm_mem  as nextflow.util.MemoryUnit, 'memory')
    def quast_cpus = check_quast( params.start_asm_cpus as int, 'cpus' )
    withName:quast {
      cpus   = {  if (task.attempt == 1) { check_max( quast_cpus, 'cpus'   ) } else { params.max_cpus   } }
      memory = {  if (task.attempt == 1) { check_max( quast_mem , 'memory' ) } else { params.max_memory } }
      time   = {  if (task.attempt == 1) { check_max( 12.h * task.attempt, 'time' ) } else { params.max_time   } }
      
      // retry at least once to try it with full resources
      errorStrategy = { task.exitStatus in [21,143,137,104,134,139,247] ? 'retry' : 'finish' }
      maxRetries    = 1
      maxErrors     = '-1'
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

def check_quast(obj, type) {
  def obj_div = (obj / 2)
  if(type == 'memory') {
    if (obj_div >= 6.GB) {
      return obj_div
    } else {
      return 6.GB
    }
  } else if(type == 'cpus') {
    if (obj_div >= 4) {
      return obj_div
    } else {
      return 4
    }
  }
}